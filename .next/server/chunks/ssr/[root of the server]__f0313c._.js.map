{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Documents/MERN/blogApp/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nexport const prisma = new PrismaClient();\r\n\r\n//creating this prisma client to interact with our models and db."],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY,IAEtC,iEAAiE"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Documents/MERN/blogApp/src/app/%28home%29/layout.tsx"],"sourcesContent":["import { prisma } from '../../../lib/prisma';\r\nimport { currentUser } from '@clerk/nextjs/server';\r\nimport React, { ReactNode } from 'react';\r\n\r\nconst Layout = async ({children}:{children:ReactNode}) => { //async as it is a server-side component\r\n    \r\n    const user = await currentUser();\r\n    if(!user) {\r\n        return null;\r\n    }\r\n    //checking if a user already exists in our db through comparing clerk id and db id\r\n    const loggedInUser = await prisma.user.findUnique({\r\n        where:{clerkUserId: user.id},\r\n    });\r\n    //if not exist, then creates a new user into the db\r\n    if (!loggedInUser) {\r\n        await prisma.user.create({\r\n            data: {\r\n                name: user.fullName as string,\r\n                clerkUserId: user.id,\r\n                email:user.emailAddresses[0].emailAddress,\r\n                imageUrl:user.imageUrl\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Layout;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAGA,MAAM,SAAS,OAAO,EAAC,QAAQ,EAAsB;IAEjD,MAAM,OAAO,MAAM,CAAA,GAAA,0LAAA,CAAA,cAAW,AAAD;IAC7B,IAAG,CAAC,MAAM;QACN,OAAO;IACX;IACA,kFAAkF;IAClF,MAAM,eAAe,MAAM,6GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QAC9C,OAAM;YAAC,aAAa,KAAK,EAAE;QAAA;IAC/B;IACA,mDAAmD;IACnD,IAAI,CAAC,cAAc;QACf,MAAM,6GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACrB,MAAM;gBACF,MAAM,KAAK,QAAQ;gBACnB,aAAa,KAAK,EAAE;gBACpB,OAAM,KAAK,cAAc,CAAC,EAAE,CAAC,YAAY;gBACzC,UAAS,KAAK,QAAQ;YAC1B;QACJ;IACJ;IAEA,qBACI,8OAAC;kBACI;;;;;;AAGb;uCAEe"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Documents/MERN/blogApp/node_modules/%40clerk/nextjs/src/server/middleware-storage.ts"],"sourcesContent":["import { AsyncLocalStorage } from 'node:async_hooks';\n\nimport type { AuthenticateRequestOptions } from '@clerk/backend/internal';\n\nexport const clerkMiddlewareRequestDataStore = new Map<'requestData', AuthenticateRequestOptions>();\nexport const clerkMiddlewareRequestDataStorage = new AsyncLocalStorage<typeof clerkMiddlewareRequestDataStore>();\n"],"names":[],"mappings":";;;;AAAA,SAAS,yBAAyB;;;AAI3B,MAAM,kCAAkC,aAAA,GAAA,IAAI,IAA+C;AAC3F,MAAM,oCAAoC,oIAAI,oBAAA,CAA0D","ignoreList":[0]}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Documents/MERN/blogApp/node_modules/%40clerk/nextjs/src/server/clerkClient.ts"],"sourcesContent":["import { constants } from '@clerk/backend/internal';\n\nimport { buildRequestLike, isPrerenderingBailout } from '../app-router/server/utils';\nimport { createClerkClientWithOptions } from './createClerkClient';\nimport { getHeader } from './headers-utils';\nimport { clerkMiddlewareRequestDataStorage } from './middleware-storage';\nimport { decryptClerkRequestData } from './utils';\n\n/**\n * Constructs a BAPI client that accesses request data within the runtime.\n * Necessary if middleware dynamic keys are used.\n */\nconst clerkClient = async () => {\n  let requestData;\n\n  try {\n    const request = await buildRequestLike();\n    const encryptedRequestData = getHeader(request, constants.Headers.ClerkRequestData);\n    requestData = decryptClerkRequestData(encryptedRequestData);\n  } catch (err) {\n    if (err && isPrerenderingBailout(err)) {\n      // eslint-disable-next-line @typescript-eslint/only-throw-error\n      throw err;\n    }\n  }\n\n  // Fallbacks between options from middleware runtime and `NextRequest` from application server\n  const options = clerkMiddlewareRequestDataStorage.getStore()?.get('requestData') ?? requestData;\n  if (options?.secretKey || options?.publishableKey) {\n    return createClerkClientWithOptions(options);\n  }\n\n  return createClerkClientWithOptions({});\n};\n\nexport { clerkClient };\n"],"names":[],"mappings":";;;AAAA,SAAS,iBAAiB;AAE1B,SAAS,kBAAkB,6BAA6B;AAExD,SAAS,iBAAiB;;AAE1B,SAAS,+BAA+B;AADxC,SAAS,yCAAyC;AAFlD,SAAS,oCAAoC;;;;;;;;AAS7C,MAAM,cAAc,YAAY;IAZhC,IAAA,IAAA;IAaE,IAAI;IAEJ,IAAI;QACF,MAAM,UAAU,MAAM,4MAAA,CAAiB;QACvC,MAAM,0MAAuB,YAAA,EAAU,0LAAS,YAAA,CAAU,OAAA,CAAQ,gBAAgB;QAClF,sLAAc,0BAAA,EAAwB,oBAAoB;IAC5D,EAAA,OAAS,KAAK;QACZ,IAAI,OAAO,iNAAA,EAAsB,GAAG,GAAG;YAErC,MAAM;QACR;IACF;IAGA,MAAM,UAAA,CAAU,KAAA,CAAA,KAAA,mLAAA,CAAA,oCAAA,CAAkC,QAAA,CAAS,CAAA,KAA3C,OAAA,KAAA,IAAA,GAA8C,GAAA,CAAI,cAAA,KAAlD,OAAA,KAAoE;IACpF,IAAA,CAAI,WAAA,OAAA,KAAA,IAAA,QAAS,SAAA,KAAA,CAAa,WAAA,OAAA,KAAA,IAAA,QAAS,cAAA,GAAgB;QACjD,2LAAO,+BAAA,EAA6B,OAAO;IAC7C;IAEA,2LAAO,+BAAA,EAA6B,CAAC,CAAC;AACxC","ignoreList":[0]}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Admin/Documents/MERN/blogApp/node_modules/%40clerk/nextjs/src/app-router/server/currentUser.ts"],"sourcesContent":["import type { User } from '@clerk/backend';\n\nimport { clerkClient } from '../../server/clerkClient';\nimport { auth } from './auth';\n\n/**\n * The `currentUser` helper returns the [Backend User](https://clerk.com/docs/references/backend/types/backend-user) object of the currently active user. It can be used in Server Components, Route Handlers, and Server Actions.\n *\n * Under the hood, this helper:\n * - calls `fetch()`, so it is automatically deduped per request.\n * - uses the [`GET /v1/users/{user_id}`](https://clerk.com/docs/reference/backend-api/tag/Users#operation/GetUser) endpoint.\n * - counts towards the [Backend API request rate limit](https://clerk.com/docs/backend-requests/resources/rate-limits#rate-limits).\n *\n * @example\n * ```tsx {{ filename: 'app/page.tsx' }}\n * import { currentUser } from '@clerk/nextjs/server'\n *\n * export default async function Page() {\n *  const user = await currentUser()\n *\n *  if (!user) return <div>Not signed in</div>\n *\n *  return <div>Hello {user?.firstName}</div>\n * }\n * ```\n */\nexport async function currentUser(): Promise<User | null> {\n  // eslint-disable-next-line @typescript-eslint/no-require-imports\n  require('server-only');\n\n  const { userId } = await auth();\n  if (!userId) {\n    return null;\n  }\n\n  return (await clerkClient()).users.getUser(userId);\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,YAAY;AADrB,SAAS,mBAAmB;;;;AAwB5B,eAAsB,cAAoC;;IAIxD,MAAM,EAAE,MAAA,CAAO,CAAA,GAAI,8LAAM,OAAA,CAAK;IAC9B,IAAI,CAAC,QAAQ;QACX,OAAO;IACT;IAEA,OAAA,CAAQ,oLAAM,cAAA,CAAY,EAAA,EAAG,KAAA,CAAM,OAAA,CAAQ,MAAM;AACnD","ignoreList":[0]}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}